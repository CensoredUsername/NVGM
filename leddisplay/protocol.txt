protocol


The communication protocol communicates in units of 8 bits. Commands are broadly split into the following classes


11xxxxxx - command packet
0xxxxxxx &
10xxxxxx - data packets

This allows for easy synchronization while maintaining the ability to send the gamma-compressed data through without bandwidth limitations.

The protocol expects a command byte first, then 0 or more argument bytes (depending on the argument).

For normal commands, up to 4 argument bytes can be concatinated together to form a 28-bit value that can be decoded into further arguments.

For the draw command, data values will be in the range of 0 to 191. This data will then be decoded to the actual gamma-corrected values.




The screen supports some "abstractions" for doing things more "efficiently".
Most screen functions operate on a virtual framebuffer, which can be mapped onto the physical segments
in several ways using the geometry command. It is then possible to select a virtual "window" in the resulting geometry,
in which several commands can be used to draw pixel by pixel, or significant sections at a time.


Currently supported unnecessarily overcomplicated commands:
    Set screen geometry: (0xC0)
        argument0:
            3 bits of width in panels,
            3 bits height in panels,
            boolean vertical,
            boolean mirror_x,
            boolean mirror_y

        packet into a 19-bit value (so 3 argument bytes)

        configures the geometry of how the leds are laid out. 

    Set cursor: (0xC1)
        arguments: 7 bits of x, 7 bits of y

        sets the cursor into the current window to x, y

    Set cursor and draw: 0xC2
        arguments: same as set cursor

        sets the cursor into the current window to x, y, and draws a pixel of the current color

    Set window: 0xC3
        argument 0: 7 bits of xmin, 7 bits of ymin, 7 bits of xmax, 7 bits of ymax
        
        configures the virtual window

    Set window and draw: 0xC4
        arguments: same as set window

        configurews the virtual window, and fills it with the current color

    Reset window: 0xC5
        arguments: none

        resets the window to cover the complete virtual framebuffer as calculated from
        the panel geometry

    Clear screen: 0xC6
        arguments: none

        sets the current color to (0, 0, 0), resets the window, and fills the screen with the current color

    Set color: 0xC7
        arguments: none
        stream: 3 color values, gamma compressed.

        sets the current color

    Set color and draw: 0xC8
        arguments: none
        stream: 3xN color values, gamma compressed

        sets the current color and draws a single pixel, incrementing the cursor in the current window.
        stream in more data to set more pixels.

    Finish frame: 0xC9
        arguments: none
        
        finish the current frame, starting over with a new frame

    Finish frame and retain: 0xCA
        arguments: none

        finish the current frame, starting over with a copy of the current frame

    Randomize: 0xCB
        arguments: none

        randomize the entire current screen.




Notes on gamma compression:
 
So we need to convert from ~sRGB colorspace to a linear colorspace, and at the same time, slightly compress the data we're sending.
luckily, this can happen as part of the same operation.

First, the rgb values are compressed with the following table, mapping all 256 values to 182 subvalues
[
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   1,   1,   1,
      1,   1,   1,   1,   2,   2,   2,   2,   2,   3,   3,   3,   3,
      3,   4,   4,   4,   4,   5,   5,   5,   5,   6,   6,   6,   7,
      7,   7,   7,   8,   8,   8,   9,   9,  10,  10,  10,  11,  11,
     12,  12,  12,  13,  13,  14,  14,  15,  15,  16,  16,  17,  17,
     18,  18,  19,  19,  20,  20,  21,  21,  22,  23,  23,  24,  24,
     25,  26,  26,  27,  28,  28,  29,  30,  30,  31,  32,  32,  33,
     34,  35,  35,  36,  37,  38,  38,  39,  40,  41,  42,  43,  43,
     44,  45,  46,  47,  48,  49,  50,  50,  51,  52,  53,  54,  55,
     56,  57,  58,  59,  60,  61,  62,  63,  64,  65,  66,  67,  68,
     69,  70,  71,  72,  73,  74,  75,  76,  77,  78,  79,  80,  81,
     82,  83,  84,  85,  86,  87,  88,  89,  90,  91,  92,  93,  94,
     95,  96,  97,  98,  99, 100, 101, 102, 103, 104, 105, 106, 107,
    108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
    121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133,
    134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146,
    147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,
    160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172,
    173, 174, 175, 176, 177, 178, 179, 180, 181
]

Then, these 182 (192) values are decompressed on the pico side with the following table
[
      0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,
     13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,
     26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,
     39,  40,  41,  42,  43,  44,  45,  46,  47,  48,  49,  50,  51,
     52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63,  64,
     65,  66,  67,  68,  70,  71,  72,  73,  74,  75,  76,  77,  79,
     80,  81,  82,  83,  85,  86,  87,  88,  90,  91,  92,  93,  95,
     96,  97,  99, 100, 101, 103, 104, 105, 107, 108, 109, 111, 112,
    114, 115, 117, 118, 120, 121, 123, 124, 126, 127, 129, 130, 132,
    133, 135, 136, 138, 140, 141, 143, 144, 146, 148, 149, 151, 153,
    154, 156, 158, 160, 161, 163, 165, 167, 168, 170, 172, 174, 176,
    177, 179, 181, 183, 185, 187, 189, 190, 192, 194, 196, 198, 200,
    202, 204, 206, 208, 210, 212, 214, 216, 218, 220, 222, 224, 226,
    228, 231, 233, 235, 237, 239, 241, 243, 246, 248, 250, 252, 255,
    255, 255, 255, 255, 255, 255, 255, 255, 255, 255
]